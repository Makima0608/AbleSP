---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by brendanwang.
--- DateTime: 2024/6/18 20:19
---

---@class Ability_Task_Aiming    瞄准
local Ability_Task_Aiming = UE4.Class(nil, "Ability_Task_Aiming")

function Ability_Task_Aiming:OnTaskStartBP(Context)
    _SP.Log("SPAbilityTask", "Ability_Task_Aiming:OnTaskStartBP")
    self.bTaskEnabled = false
    self.IsMonster = false
    if self:IsLocalCharacter(Context) then
        --1P生效，相机模块只在1P
        self.bTaskEnabled = true
        self.Character = Context:GetOwner()
        self.AnimStateComp = nil
        if self.Character then
            local World = self:GetWorld()
            local CameraManager = UE4.UMoeCameraManagerSubSystem.GetInstance()
            if CameraManager and World then
                local CameraMainPlayer = CameraManager:GetMoeCameraMainPlayer(World)
                if CameraMainPlayer then
                    self.MoeSpringArm = CameraMainPlayer.MoeSpringArm_C
                end
            end
            if self.Character:Cast(UE4.ASPGameMonsterBase) then
                self.IsMonster = true
            end
            if not self.IsMonster then
                self.AnimStateComp = self.Character:GetComponentByClass(UE4.USPAnimStateComponent.StaticClass())
                if not self.bOnlyUpdateAO then
                    self:SetAiming(true)
                end
            end
        end
    end
end

function Ability_Task_Aiming:OnTaskEndBP(Context)
    _SP.Log("SPAbilityTask", "Ability_Task_Aiming:OnTaskEndBP")
    if self.bTaskEnabled then
        if not self.bOnlyUpdateAO then
            self:SetAiming(false)
        end
    end
end

function Ability_Task_Aiming:OnTaskTickBP(Context)
    --_SP.Log("SPAbilityTask", "Ability_Task_Aiming:OnTaskTickBP")
    if self.bTaskEnabled then
        self:UpdateAimingOffset()
    end
end

function Ability_Task_Aiming:UpdateAimingOffset()
    if self.MoeSpringArm then
        local TargetRotation = self.MoeSpringArm:GetTargetRotation()
        --_SP.Log("SPAbilityTask", "Ability_Task_Aiming:OnTaskTickBP Pitch: ", TargetRotation.Pitch)
        if self.IsMonster then
            if self.Character then
                self.Character:SetSPAimingPitch(_SPFeature.Utils.MathUtils.ClampFloat(TargetRotation.Pitch, self.MinPitch, self.MaxPitch))
                --_SP.Log("SPAbilityTask", "Ability_Task_Aiming:OnTaskTickBP Pitch: ", self.Character:GetSPAimingPitch())
            end
        else
            if self.AnimStateComp  then
                self.AnimStateComp:SetSPAimingPitch(_SPFeature.Utils.MathUtils.ClampFloat(TargetRotation.Pitch, self.MinPitch, self.MaxPitch))
            end
        end
    end
end

function Ability_Task_Aiming:SetAiming(IsAiming)
    if not self.IsMonster then
        if self.AnimStateComp then
            if IsAiming then
                self.AnimStateComp:SetSPUpperBodyActionState(UE4.ESPAnimModule_AnimUpperBodyActionState.Aiming)
                self.AnimStateComp:SetSPAimingConfigFetchFlag(true)
                self.AnimStateComp:SetUseEightDirection(true)
            else
                self.AnimStateComp:SetSPUpperBodyActionState(UE4.ESPAnimModule_AnimUpperBodyActionState.None)
                self.AnimStateComp:SetSPAimingConfigFetchFlag(false)
                self.AnimStateComp:SetUseEightDirection(false)
            end
        end
    end
end

function Ability_Task_Aiming:IsLocalCharacter(Context)
    if _SPFeature.Utils.WorldUtils:IsStandalone() then
        return true
    end
    local Character = Context:GetOwner()
    if Character then
       return Character:IsLocallyControlled()
    end
    return false
end

return Ability_Task_Aiming
---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by fattyyi.
--- DateTime: 2024/11/21 11:11
---
local SPAbility = require("Feature.StarP.Script.System.Ability.SPAbilityClasses")
local SPAbilityUtils = require("Feature.StarP.Script.System.Ability.SPAbilityUtils")
local SPLuaUtility = require("Feature.StarP.Script.System.SPLuaUtility")
local IsValid = UE4.UKismetSystemLibrary.IsValid
local Ability_Task_DownwardCharge = UE4.Class(nil, "Ability_Task_DownwardCharge")

function Ability_Task_DownwardCharge:OnTaskStartBP(Context)
    local TargetArray = UE4.TArray(UE4.AActor)
    self:GetActorsForTaskBP(Context, TargetArray)

    local ScratchPad = self:GetScratchPad(Context)
    local SelfActor = Context:GetSelfActor()

    --绑定监听落地事件
    if SelfActor:IsA(UE4.ASPGameMonsterBase) then
        SelfActor.bIsOnLand = false
    end

    for i = 1, TargetArray:Length() do
        local Target = TargetArray:Get(i)
        local Character = Target:Cast(UE4.ASPGameMonsterBase)
        if not Character then
            Character = Target:Cast(UE4.ASPGameCharacterBase)
        end

        if IsValid(Character) then
            self:DownwardCharge(Context, Character)
        end
    end

end

function Ability_Task_DownwardCharge:OnTaskTickBP(Context, DeltaTime)

    local ScratchPad = self:GetScratchPad(Context)
    if not ScratchPad or not ScratchPad.Handle then
        return
    end

    local SelfActor = Context:GetSelfActor()
    if not SelfActor then
        return
    end

    if SelfActor:IsA(UE4.ASPGameMonsterBase) then
        if SelfActor.bIsOnLand then
        ScratchPad.Handle:Abort()
        --self:FixActorRotation(SelfActor)
            if not Context:GetSelfAbilityComponent():BranchSegmentWithName(Context, self.BranchSegmentOnLand) then
                _SP.LogWarning("SPAbility", "[Ability_Task_DownwardCharge]", "BranchSegment Failed")
            end
        end
    end

    ---@type AActor
    local TargetActor = self:GetSingleActorFromTargetTypeBP(Context, UE4.EAbleAbilityTargetType.ATT_TargetActor)
    if not TargetActor then
        return
    end

end

function Ability_Task_DownwardCharge:OnTaskEndBP(Context, Result)
    if Result == UE4.EAbleAbilityTaskResult.Successful then
        return
    end

    local ScratchPad = self:GetScratchPad(Context)
    if not ScratchPad or not ScratchPad.Handle then
        return
    end

    ScratchPad.Handle:Abort()
    ScratchPad.Handle = nil
end

function Ability_Task_DownwardCharge:DownwardCharge(Context, Target)

    local OffsetPitch = self.RotateOffset.X
    local OffsetYaw = self.RotateOffset.Y
    local OffsetRoll = self.RotateOffset.Z

    local IgnorePitch = self.IgnoreRotationPitch
    local IgnoreYaw = self.IgnoreRotationYaw
    local IgnoreRoll = self.IgnoreRotationRoll

    local OwnerLocation,OwnerRotation = self:GetLocationAndRotation(Target)
    local TargetActor = self:GetSingleActorFromTargetTypeBP(Context, UE4.EAbleAbilityTargetType.ATT_TargetActor)
    if not TargetActor then
        return
    end

    local TargetLocation,TargetRotation = self:GetLocationAndRotation(TargetActor)
    TargetLocation = self:ResetTargetLocation(OwnerLocation, TargetLocation)

    local Distance = TargetLocation - OwnerLocation

    local HSpeed, VSpeed = self:CalculateSpeedByDistance(Distance, self.Speed)

    local params = UE4.USPCharacterMovementLibrary.GetSpeedValueParameter(HSpeed, self.MaxHSpeed, VSpeed, self.MaxVSpeed, self.Time)

    local config = UE4.USPCharacterMovementLibrary.GetMovementConfigV2(self.UseVertical, OffsetPitch, OffsetYaw, OffsetRoll, IgnorePitch, IgnoreYaw, IgnoreRoll, self.ToleranceDistance, self.Timeout, self.VelocityMode)

    local Handle = Target:MoveToTargetLocationBySpeed(TargetLocation, params, config)

    local ScratchPad = self:GetScratchPad(Context)
    if not ScratchPad then
        return
    end

    ScratchPad.Handle = Handle

end

function Ability_Task_DownwardCharge:GetLocationAndRotation(Actor)
    local ActorLocation = Actor:K2_GetActorLocation()
    local ActorRotation = Actor:K2_GetActorRotation()

    local ActorMeshComp = Actor:GetComponentByClass(UE4.USkeletalMeshComponent.StaticClass())
    if ActorMeshComp then
        ActorLocation = ActorMeshComp:K2_GetComponentLocation()
        ActorRotation = ActorMeshComp:K2_GetComponentRotation()
    end
    return ActorLocation,ActorRotation
end

function Ability_Task_DownwardCharge:CalculateSpeedByDistance(Distance, Speed)
    local HSpeed,VSpeed = 0,0
    local HDistance = math.sqrt(Distance.X ^ 2 + Distance.Y ^ 2)
    local VDistance = math.abs(Distance.Z)
    local TotalDistance = math.sqrt(HDistance ^ 2 + VDistance ^ 2)

    HSpeed = Speed * HDistance / TotalDistance
    VSpeed = Speed * VDistance / TotalDistance

    return HSpeed, VSpeed
end

function Ability_Task_DownwardCharge:ResetTargetLocation(OwnerLocation, TargetLocation)
    local Distance = TargetLocation - OwnerLocation
    local HDistance = math.sqrt(Distance.X ^ 2 + Distance.Y ^ 2)
    if HDistance <= 0 then
        return
    end

    local ResetDistance = 0
    if HDistance < self.MinDistance then
        ResetDistance = self.MinDistance
    elseif HDistance > self.MaxDistance then
        ResetDistance = self.MaxDistance
    else
        ResetDistance = HDistance
    end

    local ResLocation = UE4.FVector(OwnerLocation.X,OwnerLocation.Y,TargetLocation.Z - 2) --此处是为了尽量保证啾灵能落地
    ResLocation.X = ResLocation.X + Distance.X * ResetDistance/HDistance
    ResLocation.Y = ResLocation.Y + Distance.Y * ResetDistance/HDistance

    return ResLocation
end

function Ability_Task_DownwardCharge:FixActorRotation(Actor)
    local OwnerLocation,OwnerRotation = self:GetLocationAndRotation(Actor)
    local ResetRotation = UE4.FRotator(0.0, 0.0, 0.0)
    ResetRotation.Yaw = OwnerRotation.Yaw
    local HitResult = UE4.FHitResult
    Actor:SPSetActorRotation(ResetRotation,false,HitResult)
end

function Ability_Task_DownwardCharge:IsSingleFrameBP()
    return false
end

function Ability_Task_DownwardCharge:ResetScratchPadBP(ScratchPad)
    if ScratchPad then
        ScratchPad.Handle = nil
    end
end

function Ability_Task_DownwardCharge:GetTaskScratchPadClassBP(Context)
    return SPAbilityUtils.LoadScratchPadClass(SPAbility.ScratchPadClass.DownwardCharge)
end

return Ability_Task_DownwardCharge
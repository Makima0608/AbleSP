---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by ecoliwu.
--- DateTime: 2024/6/22 15:29
---
local SPAbility = require("Feature.StarP.Script.System.Ability.SPAbilityClasses")
local SPAbilityUtils = require("Feature.StarP.Script.System.Ability.SPAbilityUtils")
local SPGameplayUtils = require("Feature.StarP.Script.System.SPGameplayUtils")
local Ability_Task_CollisionChannels = UE4.Class(nil, "Ability_Task_CollisionChannels")

local USPBuildingSceneObjectInterface = UE4.USPBuildingSceneObjectInterface
local DoesImplementInterface = UE4.UKismetSystemLibrary.DoesImplementInterface

local function Log(...)
    -- todo... 先把这个注掉，lua这边我v7加个全局变量来判断verbose
    -- _SP.Log("SPAbility", "[Ability_Task_CollisionChannels]", ...)
end

function Ability_Task_CollisionChannels:OnTaskStartBP(Context)
    local ScratchPad = self:GetScratchPad(Context)
    if not ScratchPad then
        return
    end
    local TargetArray = UE4.TArray(UE4.AActor)
    self:GetActorsForTaskBP(Context, TargetArray)
    if TargetArray:Length() > 0 then
        local target, primitiveComps, pLength, primitiveComp, keyName
        for i = 1, TargetArray:Length() do
            target = TargetArray:Get(i)
            if target:IsA(UE4.ASPGameCharacterBase) then
                self:ModifyCharacterOrMonster(target, ScratchPad)
            elseif target:IsA(UE4.ASPGameMonsterBase) then
                self:ModifyCharacterOrMonster(target, ScratchPad)
            elseif DoesImplementInterface(target, USPBuildingSceneObjectInterface) then
                self:ModifyBuilding(target, ScratchPad)
            else
                self:ModifyNormalCollisionChannels(target, ScratchPad)
            end
        end
    end
end

function Ability_Task_CollisionChannels:ModifyNormalCollisionChannels(actor, scratchPad)
    -- only change root component
    local rootComp = actor:GetRootComponent()
    if rootComp and rootComp:IsA(UE4.UPrimitiveComponent) then
        self:ModifyMeshComponent(actor, rootComp, scratchPad)
    end
end

function Ability_Task_CollisionChannels:ModifyCharacterOrMonster(actor, scratchPad)
    -- character and monster modify mesh and capsule
    if actor.Mesh then
        self:ModifyMeshComponent(actor, actor.Mesh, scratchPad)
    end
    if actor then
        local capsuleCompList = actor:K2_GetComponentsByClass(UE4.UCapsuleComponent)
        if capsuleCompList ~= nil then
            for i = 1, capsuleCompList:Length() do
                ---@type UCapsuleComponent
                local capsuleComp = capsuleCompList:Get(i)
                if	capsuleComp ~= nil and
                    UE4.UKismetSystemLibrary.IsValid(capsuleComp) == true and
                    capsuleComp:IsValid() then
                    self:ModifyMeshComponent(actor, capsuleComp, scratchPad)
                end
            end
        end
    end
end

-- function Ability_Task_CollisionChannels:ModifySPMonster(actor, scratchPad)
--     -- momnster modify capsule(mesh no physics collision)
--     if actor.CapsuleComponent then
--         self:ModifyMeshComponent(actor, actor.CapsuleComponent, scratchPad)
--     end
-- end

function Ability_Task_CollisionChannels:ModifyBuilding(actor, scratchPad)
    if actor.GetAllStaticMeshComp then
        local meshTabel = actor:GetAllStaticMeshComp()
        for _, mesh in pairs(meshTabel) do
            self:ModifyMeshComponent(actor, mesh, scratchPad)
        end
    end
end

function Ability_Task_CollisionChannels:ModifyMeshComponent(actor, meshComp, scratchPad)
    if meshComp then
        local collisionProfileName = meshComp:GetCollisionProfileName()
        if collisionProfileName ~= "Custom" then
            return
        end
        if self.bRecoverOnEnd then
            local collisionParams = {}
            collisionParams.ChannelsPairs = {}
            collisionParams.PrimitiveComp = meshComp
            local channel, response
            if self.CollisionResponses:Length() > 0 then
                local responsePair
                for i = 1, self.CollisionResponses:Length() do
                    responsePair = self.CollisionResponses:Get(i)
                    channel = responsePair.CollisionChannel
                    response = meshComp:GetCollisionResponseToChannel(channel)
                    table.insert(collisionParams.ChannelsPairs, {channel = channel, response = response})
                    -- modify collision Channels
                    meshComp:SetCollisionResponseToChannel(responsePair.CollisionChannel, responsePair.CollisionResponse)
                    Log("ModifyMeshComponent actor = ", actor:GetName(), "compName = ", meshComp:GetName(), "collisionChannel = ", responsePair.CollisionChannel, "collisionResponse = ", responsePair.CollisionResponse)
                end
            end
            -- collisionParams.CollisionEnabled = meshComp:GetCollisionEnabled()
            -- collisionParams.CollisionObjType = meshComp:GetCollisionObjectType()
            table.insert(scratchPad.CollisionProfileNameMap, collisionParams)
            -- if not _SPFeature.Utils.TableUtils.Contains(scratchPad.CollisionActorMap, actor) then
            --     table.insert(scratchPad.CollisionActorMap, actor)
            -- end
        end
        -- modify collision Channels
        -- if self.CollisionResponses:Length() > 0 then
        --     local responsePair
        --     for i = 1, self.CollisionResponses:Length() do
        --         responsePair = self.CollisionResponses:Get(i)
        --         meshComp:SetCollisionResponseToChannel(responsePair.CollisionChannel, responsePair.CollisionResponse)
        --         Log("ModifyMeshComponent actor = ", actor:GetName(), "compName = ", meshComp:GetName(), "collisionChannel = ", responsePair.CollisionChannel, "collisionResponse = ", responsePair.CollisionResponse)
        --     end
        -- end
        -- meshComp:SetCollisionObjectType(self.CollisionObjectType)
        -- meshComp:SetCollisionEnabled(self.CollisionEnabled)
    end
end

function Ability_Task_CollisionChannels:RecoveryOnEnd(scratchPad, owner)
    if _SP.IsDSorStandalone and _SP.IsValid(owner) then
        SPAbilityUtils.ResolvePlayerStuckInActor(owner)
    end
    for _, collisionParams in pairs(scratchPad.CollisionProfileNameMap) do
        local meshComp = collisionParams.PrimitiveComp
        if UE4.UKismetSystemLibrary.IsValid(meshComp) then
            for _, channelsPair in pairs(collisionParams.ChannelsPairs) do
                meshComp:SetCollisionResponseToChannel(channelsPair.channel, channelsPair.response)
                Log("RecoveryOnEnd compName = ", meshComp:GetName(), "collisionChannel = ", channelsPair.channel, "collisionResponse = ", channelsPair.response)
            end
            -- meshComp:SetCollisionObjectType(collisionParams.CollisionObjType)
            -- meshComp:SetCollisionEnabled(collisionParams.CollisionEnabled)
        end
    end

    -- modify actor location
    -- if _SP.IsDSorStandalone then
    --     for _, actor in pairs(scratchPad.CollisionActorMap) do
    --         Log("RecoveryOnEnd Location actor = ", actor:GetName(), "before lcoation = ", actor:K2_GetActorLocation())
    --         SPGameplayUtils:AdjustedActorPosition(actor, actor:K2_GetActorLocation())
    --         Log("RecoveryOnEnd Location actor = ", actor:GetName(), "after lcoation = ", actor:K2_GetActorLocation())
    --     end
    -- end
end

function Ability_Task_CollisionChannels:OnTaskEndBP(Context)
    if not self.bRecoverOnEnd then
        return
    end
    local ScratchPad = self:GetScratchPad(Context)
    if not ScratchPad then
        return
    end
    if ScratchPad.CollisionProfileNameMap and #ScratchPad.CollisionProfileNameMap > 0 then
        self:RecoveryOnEnd(ScratchPad, Context:GetOwner())
    end
    ScratchPad.CollisionProfileNameMap = {}
    -- ScratchPad.CollisionActorMap = {}
end

function Ability_Task_CollisionChannels:ResetScratchPadBP(ScratchPad)
    if ScratchPad then
        ScratchPad.CollisionProfileNameMap = {}
        -- ScratchPad.CollisionActorMap = {}
    end
end

function Ability_Task_CollisionChannels:GetTaskScratchPadClassBP(Context)
    return SPAbilityUtils.LoadScratchPadClass(SPAbility.ScratchPadClass.CollisionChannels)
end

return Ability_Task_CollisionChannels
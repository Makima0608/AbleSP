---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by svencgli.
--- DateTime: 2024/6/21 23:32
---
local SPAbility = require("Feature.StarP.Script.System.Ability.SPAbilityClasses")
local SPAbilityUtils = require("Feature.StarP.Script.System.Ability.SPAbilityUtils")
local Ability_Task_ScaleParticle = UE4.Class(nil, "Ability_Task_ScaleParticle")

function Ability_Task_ScaleParticle:OnTaskStartBP(Context)

    _SP.Log("AbleTask", "Ability_Task_ParticleScaleSetter OnTaskStartBP")
    local TargetArray = UE4.TArray(UE4.AActor)
    self:GetActorsForTaskBP(Context, TargetArray)

    for i = 1, TargetArray:Length() do
        local Target = TargetArray:Get(i)

        if Target then

            local ComponentArray  = Target:K2_GetComponentsByClass(UE4.UParticleSystemComponent)

            local ParticleComponent
            for j = 1, ComponentArray:Length() do

                local Comp = ComponentArray:Get(j)

                _SP.Log("AbleTask", "Comp Name ", i, Comp:GetName())

                if Comp:GetName() == self.ParticleName then
                    self:TrySetParticleComponent(Context, Comp)
                    return
                end
            end
        end
    end
end

function Ability_Task_ScaleParticle:OnTaskTickBP(Context, DeltaTime)
    _SP.Log("AbleTask", "Ability_Task_ParticleScaleSetter OnTaskTickBP")

    local ScratchPad = self:GetScratchPad(Context)
    if ScratchPad then
        ScratchPad.ElapsedTime = ScratchPad.ElapsedTime + DeltaTime
        local DurationTime = self:GetDuration()
        local Progress = DurationTime > 0 and (ScratchPad.ElapsedTime / DurationTime) or 0
        self:TryUpdateParticleScale(Context, Progress)
    end
end

function Ability_Task_ScaleParticle:OnTaskEndBP(Context, Result)

    _SP.Log("AbleTask", "Ability_Task_ParticleScaleSetter OnTaskEndBP")

    if Result ~= UE4.EAbleAbilityTaskResult.Successful then
        self:TryUpdateParticleScale(Context, 1)
    end
end

function Ability_Task_ScaleParticle:TrySetParticleComponent(Context, ParticleComponent)

    local ScratchPad = self:GetScratchPad(Context)
    if not ScratchPad then
        return
    end

    ScratchPad.ParticleComponent = ParticleComponent
    ScratchPad.ElapsedTime = 0
end

function Ability_Task_ScaleParticle:TryUpdateParticleScale(Context, Progress)

    local ScratchPad = self:GetScratchPad(Context)
    if not ScratchPad or not ScratchPad.ParticleComponent then
        return
    end

    local Scale = self.ScaleCurve:GetFloatValue(Progress) * self.MaxScale

    _SP.Log("AbleTask", "Ability_Task_ParticleScaleSetter TryUpdateParticleScale", Progress, Scale)

    ScratchPad.ParticleComponent:SetRelativeScale3D(UE4.FVector(Scale, Scale, Scale))
end

function Ability_Task_ScaleParticle:IsSingleFrameBP()
    return false
end

function Ability_Task_ScaleParticle:ResetScratchPadBP(ScratchPad)
    if ScratchPad then
        ScratchPad.ParticleComponent = nil
        ScratchPad.ElapsedTime = 0
    end
end


function Ability_Task_ScaleParticle:GetTaskScratchPadClassBP(Context)
    return SPAbilityUtils.LoadScratchPadClass(SPAbility.ScratchPadClass.ScaleParticle)
end

return Ability_Task_ScaleParticle

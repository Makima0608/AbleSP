---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by byteyang.
--- DateTime: 2024/6/19 下午9:47
---

local PetInteractDefine = require("Feature.StarP.Script.System.Character.Define.PetInteractDefine")
local MonsterStatus = PetInteractDefine.MonsterStatus

local Log = function(...)
    _SP.Log("Ability_Task_ThrowPal", ...)
end

local Warning = function(...)
    _SP.LogWarning("Ability_Task_ThrowPal", ...)
end

---@class Ability_Task_ThrowPal : USPAbilityTask
local Ability_Task_ThrowPal = UE4.Class(nil, "Ability_Task_ThrowPal")

---OnTaskStartBP
---@param Context UAbleAbilityContext
function Ability_Task_ThrowPal:OnTaskStartBP(Context)
    Log("OnTaskStartBP")

    ---@type SPGameCharacter
    local Player = Context:GetOwner()
    if not Player then
        Warning("Player is nil")
        return
    end

    local SPPetInteractComponent = Player:GetPetInteractComponent()
    if not SPPetInteractComponent then
        Warning("SPPetInteractComponent is nil")
        return
    end

    local MonsterUID = SPPetInteractComponent:GetMonsterUID()

    _SP.EventManager:DispatchEvent(_SP.EventEnum.ON_SPGAME_DS_THROW_PET_NUM, Player:GetUID(), MonsterUID)

    ---@type SPGameMonsterManager
    local MonsterManager
    if _SP.IsDSorStandalone then
        MonsterManager = _SP.DS.MonsterManager
    else
        MonsterManager = _SP.Client.MonsterManager
    end

    ---@type SPGameMonsterBase
    local Monster = MonsterManager:GetActiveMonster(MonsterUID)
    if Monster then

        -- 暂时先这么设置碰撞 后续V7拆出"被投掷状态"
        _SP.SPGameplayUtils.SetCollisionEnabled(Monster.CapsuleComponent, UE4.ECollisionEnabled.QueryAndPhysics, "ThrowPal")
        Monster:SetInteractStatus(MonsterStatus.Throw_Begin)

        local Location = Monster:K2_GetActorLocation()
        local PlayerYaw = 0
        ---@type USkeletalMeshComponent
        local Mesh = Player.Mesh
        if Mesh then
            local PlayerRotation = Mesh:K2_GetComponentRotation()
            PlayerYaw = PlayerRotation.Yaw + 90
        end

        if _SP.IsClient then
            local Velocity = self:ComputeVelocity(self.ProjectileSpeed, Location, Player)

            --Monster:K2_DetachFromActor(UE4.EDetachmentRule.KeepWorld)
            --Monster:K2_SetActorRotation(UE4.FRotator(0, PlayerYaw, 0))

            -----@type UProjectileMovementComponent
            --local ProjectileMovement = Monster.ProjectileMovement
            --if ProjectileMovement then
            --    ProjectileMovement.Velocity = Velocity
            --    ProjectileMovement:SetUpdatedComponent(Monster:K2_GetRootComponent())
            --    ProjectileMovement:SetActive(true, true)
            --
            --    Log("OnTaskStartBP", "ProjectileMovement", ProjectileMovement.Velocity)
            --end

            SPPetInteractComponent:C2S_ThrowPal(PlayerYaw, Location, Velocity)
        end
    end
end

---ComputeVelocity
---@param InitialSpeed number
---@param MonsterLocation FVector
---@param Player SPGameCharacter
function Ability_Task_ThrowPal:ComputeVelocity(InitialSpeed, MonsterLocation, Player)
    Log("ComputeVelocity", InitialSpeed, MonsterLocation)
    if not (InitialSpeed > 0) then
        InitialSpeed = 1
    end

    local PlayerController = Player:GetController()
    if not PlayerController then
        Warning("PlayerController is nil")
        return 0
    end

    local PlayerCameraManager = PlayerController.PlayerCameraManager
    if not PlayerCameraManager then
        Warning("PlayerCameraManager is nil")
        return 0
    end

    local CameraLocation = PlayerCameraManager:GetCameraLocation()
    local CameraRot = PlayerCameraManager:GetCameraRotation()
    Log("ComputeVelocity Begin CameraRot", CameraRot)
    CameraRot = CameraRot + UE4.FRotator(self.CameraPitchOffset, 0, 0)
    Log("ComputeVelocity End CameraRot", CameraRot)
    local CameraForward = UE4.UKismetMathLibrary.GetForwardVector(CameraRot)
    Log("ComputeVelocity CameraForward", CameraForward)
    -- 远端交点
    local TargetLocation = CameraLocation + CameraForward * self.TargetDistance
    Log("ComputeVelocity TargetLocation", TargetLocation)
    -- 投掷方向
    local Velocity = TargetLocation - MonsterLocation
    Velocity = UE4.UKismetMathLibrary.Normal(Velocity)
    Log("ComputeVelocity Velocity", Velocity)

    return Velocity * InitialSpeed
end

function Ability_Task_ThrowPal:OnTaskEndBP(Context, result)
    Log("OnTaskEndBP", result)
end

return Ability_Task_ThrowPal
---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by fattyyi.
--- DateTime: 2024/12/2 14:47
---
local SPAbility = require("Feature.StarP.Script.System.Ability.SPAbilityClasses")
local SPAbilityUtils = require("Feature.StarP.Script.System.Ability.SPAbilityUtils")
local SPLuaUtility = require("Feature.StarP.Script.System.SPLuaUtility")
local IsValid = UE4.UKismetSystemLibrary.IsValid
local AttrTypeEnum = _SPFeature.ServerEnum.StarPAttrType

local Ability_Task_PerfectDodge = UE4.Class(nil, "Ability_Task_PerfectDodge")

function Ability_Task_PerfectDodge:OnTaskStartBP(Context)
    local TargetArray = UE4.TArray(UE4.AActor)
    self:GetActorsForTaskBP(Context, TargetArray)
    local ScratchPad = self:GetScratchPad(Context)
    local Character = Context:GetSelfActor()
    if IsValid(Character) then
        local PerfectDodgeComponent = Character:GetComponentByClass(UE4.USPPerfectDodgeComponent:StaticClass())
        PerfectDodgeComponent:SetPerfectDodgeCheckTime(true)
    end
end

function Ability_Task_PerfectDodge:OnTaskTickBP(Context, DeltaTime)

    local ScratchPad = self:GetScratchPad(Context)
    if not ScratchPad then
        return
    end

    -- _SP.LogWarning("SPAbility", "[Ability_Task_PerfectDodge]", "current tick time", ScratchPad.TumblingTime)

    ---@type AActor
    local TargetActor = self:GetSingleActorFromTargetTypeBP(Context, UE4.EAbleAbilityTargetType.ATT_TargetActor)
    if not TargetActor then
        return
    end

    local SelfActor = Context:GetSelfActor()
    if not SelfActor then
        return
    end
end

function Ability_Task_PerfectDodge:OnTaskEndBP(Context, Result)
    local Character = Context:GetSelfActor()
    if IsValid(Character) then
        local PerfectDodgeComponent = Character:GetComponentByClass(UE4.USPPerfectDodgeComponent:StaticClass())
        PerfectDodgeComponent:SetPerfectDodgeCheckTime(false)
    end

    if Result == UE4.EAbleAbilityTaskResult.Successful then
        return
    end

    local ScratchPad = self:GetScratchPad(Context)
    if not ScratchPad then
        return
    end

    -- _SP.LogWarning("SPAbility", "[Ability_Task_PerfectDodge]", "current end time", ScratchPad.TumblingTime)
end

function Ability_Task_PerfectDodge:IsSingleFrameBP()
    return false
end

function Ability_Task_PerfectDodge:ResetScratchPadBP(ScratchPad)
    if ScratchPad then
        ScratchPad.Character = nil
        ScratchPad.TumblingTime = 0
    end
end

---根据属性修正完美闪避判定区间长度
---@param Context UAbleAbilityContext
function Ability_Task_PerfectDodge:IsDoneBP(Context)
    local curTime = Context:GetCurrentTime()
    local maxTimeLength = 0
    if curTime > 0 and Context:GetCurrentTimeRatio() > 0 then
        maxTimeLength = curTime / Context:GetCurrentTimeRatio()
    end
    local modifyValue = 0
    local Character = Context:GetSelfActor()
    if IsValid(Character) then
        local attributeData = _SP.SPAbilityUtils.GetAttributeDataFromObjectInfo(Character)
        if attributeData ~= nil then
            modifyValue = attributeData:GetAttributeValue(AttrTypeEnum.SPAT_PerfectDodge_Fix) --TODO: 需要接入真实的完美闪避区间修正属性
            if self:GetTaskEndTimeBP() + modifyValue > maxTimeLength then
                modifyValue = maxTimeLength - self:GetTaskEndTimeBP() --长度限制
            end
        end
    end
    return self:GetTaskStartTimeBP() + curTime > self:GetTaskEndTimeBP() + modifyValue
end

function Ability_Task_PerfectDodge:GetTaskScratchPadClassBP(Context)
    return SPAbilityUtils.LoadScratchPadClass(SPAbility.ScratchPadClass.PerfectDodge)
end

function Ability_Task_PerfectDodge:OnHit(Character)
    if _SP.IsDS then
        local PerfectDodgeComponent = Character:GetComponentByClass(UE4.USPPerfectDodgeComponent:StaticClass())
        PerfectDodgeComponent:LuaSinglecast_PerfectDodge()
        return
    end
end

function Ability_Task_PerfectDodge:SetMaterial(SPTargetActor)
    --添加材质
    local MaterialComponent = SPTargetActor:GetComponentByClass(UE4.USPMaterialManagerComponent:StaticClass())
    if MaterialComponent and self.Material then
        if UE4.UKismetSystemLibrary.IsValid(self.Material) then
            local DynamicMaterial = UE4.UKismetMaterialLibrary.CreateDynamicMaterialInstance(_SP.GetCurrentWorld(),
                self.Material)
            self.OverlayMaterial = MaterialComponent:AddMaterial(DynamicMaterial, 500, 1, true)
        end
    end
end

return Ability_Task_PerfectDodge
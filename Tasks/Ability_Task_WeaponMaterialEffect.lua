---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by brendanwang.
--- DateTime: 2025/1/23 16:48
---

local SPAbility = require("Feature.StarP.Script.System.Ability.SPAbilityClasses")
local SPAbilityUtils = require("Feature.StarP.Script.System.Ability.SPAbilityUtils")
local SPLuaUtility = require("Feature.StarP.Script.System.SPLuaUtility")
local IsValid = UE4.UKismetSystemLibrary.IsValid
local ESPMaterialType = _SP.SPAbilityUtils.ESPMaterialType
local ELEMTypeEnum = _SPFeature.ServerEnum.SPPetElementType
local AttrEnum = _SPFeature.ServerEnum.StarPAttrType
local AttrOpEnum = _SPFeature.ServerEnum.StarPAttrOPType
local Ability_Task_WeaponMaterialEffect = UE4.Class(nil, "Ability_Task_WeaponMaterialEffect")

local function Log(...)
    _SP.Log("SPAbility", "[Ability_Task_WeaponMaterialEffect]", ...)
end

function Ability_Task_WeaponMaterialEffect:OnTaskStartBP(Context)
    _SP.Log("SPAbility", "Ability_Task_WeaponMaterialEffect:OnTaskStartBP")
    local ScratchPad = self:GetScratchPad(Context)
    if not ScratchPad then
        return
    end

    local TargetArray = UE4.TArray(UE4.AActor)
    self:GetActorsForTaskBP(Context, TargetArray)

    for i = 1, TargetArray:Length() do
        local Target = TargetArray:Get(i)
        local Character = Target:Cast(UE4.ASPGameCharacterBase)
        if not Character then
            Character = Target:Cast(UE4.ASPGameMonsterBase)
        end

        if Character then
            self:GetMaterialConfig(Context, Character)
            if not IsValid(ScratchPad.ConfigMaterial) then
                return
            end

            if Character:IsA(UE4.ASPGameCharacterBase) then
                self:SetWeaponMaterial(Context, Character, ScratchPad.ConfigMaterial)
            end
        end
    end
end

function Ability_Task_WeaponMaterialEffect:OnTaskEndBP(Context)
    local ScratchPad = self:GetScratchPad(Context)
    if not ScratchPad then
        return
    end

    local TargetArray = UE4.TArray(UE4.AActor)
    self:GetActorsForTaskBP(Context, TargetArray)
    for i = 1, TargetArray:Length() do
        local Target = TargetArray:Get(i)
        local Character = Target:Cast(UE4.ASPGameCharacterBase)
        if not Character then
            Character = Target:Cast(UE4.ASPGameMonsterBase)
        end
        if Character:IsA(UE4.ASPGameCharacterBase) then
            self:SetWeaponMaterial(Context, Character, nil)
        end
    end
end

function Ability_Task_WeaponMaterialEffect:GetMaterialConfig(Context, Character)
    local ScratchPad = self:GetScratchPad(Context)
    if not ScratchPad then
        return
    end
    if self.bUseElementMaterial then
        local Element = nil
        if Character:IsA(UE4.ASPGameMonsterBase) then
            local MonsterConfig = Character.GetMonsterTypeConfig and Character:GetMonsterTypeConfig() or nil
            if MonsterConfig ~= nil and MonsterConfig.elements ~= nil then
                Element = ELEMTypeEnum[MonsterConfig.elements]
            end
        elseif Character:IsA(UE4.ASPGameCharacterBase) then
            local AttrComponent = _SP.SPSubSystemUtil.GetAttributeDataByAvatar(Character)
            if AttrComponent == nil then
                return nil
            end
            if _SP.IsDSorStandalone then
                Element = AttrComponent:GetSPAttributeValue(AttrEnum.SPAT_Ultimate_DamageElementType, AttrOpEnum.SPAT_OP_Base)
            else
                Element = AttrComponent:GetAttributeValue(AttrEnum.SPAT_Ultimate_DamageElementType)
            end
        end

        if Element then
            local MaterialConfigs = self.ElementMaterials:ToTable()
            if MaterialConfigs then
                local MaterialConfig = MaterialConfigs[Element]
                if (MaterialConfig) then
                    ScratchPad.ConfigMaterial = MaterialConfig.Material
                    ScratchPad.ConfigPriority = MaterialConfig.Priority
                    ScratchPad.ConfigMaterialParam = MaterialConfig.ChangeMaterialParams
                end
            end
        end

    else
        ScratchPad.ConfigMaterial = self.Material
        ScratchPad.ConfigPriority = self.Priority
        ScratchPad.ConfigMaterialParam = self.ChangeMaterialParams
    end

end

function Ability_Task_WeaponMaterialEffect:GetCurrentCurveValue(currentTime, curve, type)
    local DurationTime = self:GetDuration()
    local Progress = DurationTime > 0 and (currentTime / DurationTime) or 0
    if type == ESPMaterialType.Float and curve:IsA(UE4.UCurveFloat.StaticClass()) then
        return curve:GetFloatValue(Progress)
    elseif type == ESPMaterialType.LinearColor and curve:IsA(UE4.UCurveLinearColor.StaticClass()) then
        return curve:GetLinearColorValue(Progress)
    end
end

function Ability_Task_WeaponMaterialEffect:SetMaterialParamByType(mat, paramName, value, modifyType)
    if not _SP.IsValid(mat) then
        Log("mat nil")
        return
    end
    if modifyType == ESPMaterialType.Float and type(value) == "number" then
        if mat.SetScalarParameterValue then
            if value <= 0.00001 then
                value = 0
            end
            mat:SetScalarParameterValue(paramName, value)
        end
    elseif modifyType == ESPMaterialType.LinearColor then
        if mat.SetVectorParameterValue then
            mat:SetVectorParameterValue(paramName, value)
        end
    end
end

function Ability_Task_WeaponMaterialEffect:OnTaskTickBP(Context, DeltaTime)
    if not self.bUpdateParam then
        return
    end
    local ScratchPad = self:GetScratchPad(Context)
    if not ScratchPad then
        return
    end
    ScratchPad.ElapsedTime = ScratchPad.ElapsedTime + DeltaTime
    -- Tick Modify Material Param
    local paramName, param
    local curve, curveType
    local overlayMaterial
    for _, materialComp in pairs(ScratchPad.MaterialComps) do
        if _SP.IsValid(materialComp) and materialComp.GetOverlayMaterial then
            overlayMaterial = materialComp:GetOverlayMaterial()
            if overlayMaterial and ScratchPad.ConfigMaterialParam then
                for i = 1, ScratchPad.ConfigMaterialParam:Length() do
                    param = ScratchPad.ConfigMaterialParam:GetRef(i)
                    curve = param.Curve
                    curveType = param.Type
                    local value = self:GetCurrentCurveValue(ScratchPad.ElapsedTime, curve, curveType)
                    if value then
                        paramName = param.ParamName
                        if paramName and paramName ~= "" then
                            self:SetMaterialParamByType(overlayMaterial, paramName, value, curveType)
                        end
                    end
                end
            end
        end
    end
end

function Ability_Task_WeaponMaterialEffect:SetWeaponMaterial(Context, Character, Material)
    local ScratchPad = self:GetScratchPad(Context)
    if not ScratchPad then
        return
    end

    if Character.GetCrtEquipWeapon ~= nil then
        local weapon = Character:GetCrtEquipWeapon()
        if UE4.UKismetSystemLibrary.IsValid(weapon) then
            if weapon:IsA(UE4.ASPDualWeapon) then
                local LeftWeapon = weapon.LeftWeapon
                local RightWeapon = weapon.RightWeapon
                if _SP.IsValid(LeftWeapon) and _SP.IsValid(RightWeapon) then
                    local LeftMeshComp = LeftWeapon:GetWeaponMeshComponent()
                    local RightMeshComp = RightWeapon:GetWeaponMeshComponent()
                    if LeftMeshComp and RightMeshComp then
                        LeftMeshComp:SetOverlayMaterial(Material)
                        RightMeshComp:SetOverlayMaterial(Material)
                        if Material then
                            table.insert(ScratchPad.MaterialComps, LeftMeshComp)
                            table.insert(ScratchPad.MaterialComps, RightMeshComp)
                        end
                    end
                end
            else
                local MeshComp = weapon:GetWeaponMeshComponent()
                if MeshComp then
                    MeshComp:SetOverlayMaterial(Material)
                    if Material then
                        table.insert(ScratchPad.MaterialComps, MeshComp)
                    end
                end
            end
        end
    end
end

function Ability_Task_WeaponMaterialEffect:IsSingleFrameBP()
    return not self.bUpdateParam
end

function Ability_Task_WeaponMaterialEffect:ResetScratchPadBP(ScratchPad)
    if ScratchPad then
        ScratchPad.MaterialComps = {}
        ScratchPad.ElapsedTime = 0
        ScratchPad.Material = nil
        ScratchPad.ConfigMaterial = nil
        ScratchPad.ConfigPriority = nil
        ScratchPad.ConfigMaterialParam = nil
    end
end

function Ability_Task_WeaponMaterialEffect:GetTaskScratchPadClassBP(Context)
    return SPAbilityUtils.LoadScratchPadClass(SPAbility.ScratchPadClass.WeaponMaterialEffect)
end

return Ability_Task_WeaponMaterialEffect
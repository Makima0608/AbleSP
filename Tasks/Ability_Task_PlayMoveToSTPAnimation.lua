---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by bladeyuan.
--- DateTime: 2024/6/21 19:48
---
local SPAbility = require("Feature.StarP.Script.System.Ability.SPAbilityClasses")
local SPAbilityUtils = require("Feature.StarP.Script.System.Ability.SPAbilityUtils")
local Ability_Task_PlayMoveToSTPAnimation = UE4.Class(nil, "Ability_Task_PlayMoveToSTPAnimation")

function Ability_Task_PlayMoveToSTPAnimation:OnTaskStartBP(Context)
    local ScratchPad = self:GetScratchPad(Context)
    if not ScratchPad then
        return
    end

    ScratchPad.SingleNodeSkeletalComponents = {}
    ScratchPad.bMonster = false

    local TargetActor = Context:GetOwner()
    if not _SP.IsValid(TargetActor) then
        _SP.Log("Ability_Task_PlayMoveToSTPAnimation", "OnTaskStartBP", "Context Owner Invalid!")
        return
    end

    if TargetActor:IsA(UE4.ASPGameMonsterBase) then
        ScratchPad.bMonster = true
    end

    self:PlayAnimationWithSTP(Context, TargetActor)
end

local EActorToSTPOrientation = {
    ForwardSTP = 1,  --朝向STP点
    BackwardSTP = 2 --背离STP点
};

local EActorToSTPRotationDirection = {
    RotLeft = 1,  --左转STP点
    RotRight = 2  --右转STP点
};

function Ability_Task_PlayMoveToSTPAnimation:PlayAnimationWithSTP(Context, TargetActor)
    local ToSTPOrientation, ToSTPRotationDir = self:GetConfigDungeonSTP(Context, TargetActor)

    local AnimationAsset = nil
    if ToSTPOrientation == EActorToSTPOrientation.ForwardSTP and ToSTPRotationDir == EActorToSTPRotationDirection.RotLeft then
        AnimationAsset = self.FrontLeftAnim
    end

    if ToSTPOrientation == EActorToSTPOrientation.ForwardSTP and ToSTPRotationDir == EActorToSTPRotationDirection.RotRight then
        AnimationAsset = self.FrontRightAnim
    end

    if ToSTPOrientation == EActorToSTPOrientation.BackwardSTP and ToSTPRotationDir == EActorToSTPRotationDirection.RotLeft then
        AnimationAsset = self.BackLeftAnim
    end

    if ToSTPOrientation == EActorToSTPOrientation.BackwardSTP and ToSTPRotationDir == EActorToSTPRotationDirection.RotRight then
        AnimationAsset = self.BackLeftAnim
    end

    if not _SP.IsValid(AnimationAsset) then
        return
    end

    self:PlayAnimation(Context, TargetActor, AnimationAsset)
end

function Ability_Task_PlayMoveToSTPAnimation:OnTaskEndBP(Context, Result)
    if Context == nil then
        return
    end

    local ScratchPad = self:GetScratchPad(Context)
    if not ScratchPad then
        return
    end

    local TargetActor = Context:GetOwner()
    if not _SP.IsValid(TargetActor) then
        _SP.Log("Ability_Task_PlayMoveToSTPAnimation", "OnTaskEndBP", "Context Owner Invalid!")
        return
    end

    local SkeletalMeshComponent = _SP.SPGameplayUtils.GetSkeletalMeshComponent(TargetActor)
    if not _SP.IsValid(SkeletalMeshComponent) then
        _SP.Log("Ability_Task_PlayMoveToSTPAnimation", "OnTaskEndBP", "GetSkeletalMesh Error!")
        return
    end

    self:StopAnimtaion(ScratchPad, SkeletalMeshComponent)
end

function Ability_Task_PlayMoveToSTPAnimation:StopAnimtaion(ScratchPad, SkeletalMeshComponent)
    if self.UseDynamicMontage then
        local Instance = SkeletalMeshComponent:GetAnimInstance()
        if _SP.IsValid(Instance) then
            Instance:Montage_Stop(self.BlendOutTime)
        end
    else
        for _, SkeletalComponent in ipairs(ScratchPad.SingleNodeSkeletalComponents) do
            SkeletalComponent:Stop()
        end
    end
end

function Ability_Task_PlayMoveToSTPAnimation:CalculateTurnDirection(sourceAngle, targetAngle)
    -- 规范化角度到0-360范围内
    local normalizedA = sourceAngle % 360
    local normalizedB = targetAngle % 360

    -- 计算两种可能的转向差距
    local diff = (normalizedB - normalizedA + 360) % 360
    local reverseDiff = (normalizedA - normalizedB + 360) % 360

    -- 判断最短路径是左转还是右转
    if diff <= reverseDiff then
        return EActorToSTPRotationDirection.RotRight
    else
        return EActorToSTPRotationDirection.RotLeft
    end
end

---@param Character AActor
---@return ToSTPOrientation, ToSTPRotationDir
function Ability_Task_PlayMoveToSTPAnimation:GetConfigDungeonSTP(Context, Character)
    local ScratchPad = self:GetScratchPad(Context)
    if not ScratchPad then
        return
    end
    --获取Monster所在的关卡偏移量
    local Locationoffset = UE4.FVector(0, 0, 0)
    if ScratchPad.bMonster then
        Locationoffset = Character:GetMonsterDungeonLoc()
    end

    local STPIDList = {}
    local bUsePrimaryKey = false
    if self.STPUIDList:Length() > 0 then
        bUsePrimaryKey = true
        for index = 1, self.STPUIDList:Length() do
            table.insert(STPIDList, self.STPUIDList:Get(index))
        end
    else
        for index = 1, self.STPIDList:Length() do
            table.insert(STPIDList, self.STPIDList:Get(index))
        end
    end

    --获取表中配置的STP信息
    local findSTPInfo = SPAbilityUtils.GetSTPConfigList(STPIDList, bUsePrimaryKey)

    -- 如果并未匹配到STP配置则不进行移动
    if #findSTPInfo == 0 then
        _SP.Log("Ability_Task_PlayMoveToSTPAnimation", "GetConfigDungeonSTP", "Unable to find matching STP points, Please check the ability configuration.")
        return nil, nil
    end

    local TargetLocation = nil
    local TargetRotation = nil
    --计算离目标最近的STP点
    local ownerLocation = Character:K2_GetActorLocation()
    local ownerRotation = Character:K2_GetActorRotation()
    local nearestDistance = nil
    for _, virtualPoint in ipairs(findSTPInfo) do
        local locParam = string.split(virtualPoint.pos, ',')
        local stpLocation = UE4.FVector(locParam[1], locParam[2], locParam[3]) + Locationoffset
        local distance = UE4.UKismetMathLibrary.Vector_Distance(ownerLocation, stpLocation)
        if nearestDistance == nil or distance < nearestDistance then
            nearestDistance = distance
            TargetLocation = stpLocation
            local rotParam = string.split(virtualPoint.rot, ',')
            TargetRotation = UE4.FVector(rotParam[1], rotParam[2], rotParam[3])
        end
    end

    if TargetLocation == nil or TargetRotation == nil then
        _SP.Log("Ability_Task_PlayMoveToSTPAnimation", "GetConfigDungeonSTP", "No matched STP points.")
        return
    end

    -- 计算目标点朝向和转向
    local directionToTarget = UE4.UKismetMathLibrary.Subtract_VectorVector(TargetLocation, ownerLocation)
    local ownerForwardVector = ownerRotation:GetForwardVector()
    local dotProduct = UE4.UKismetMathLibrary.Dot_VectorVector(ownerForwardVector, directionToTarget)

    local ToSTPOrientation = nil
    local ToSTPRotationDir = nil
    -- 朝向背向检查
    if dotProduct > 0 then
        ToSTPOrientation = EActorToSTPOrientation.ForwardSTP
    else
        ToSTPOrientation = EActorToSTPOrientation.BackwardSTP
    end

    -- 旋转方向计算
    ToSTPRotationDir = self:CalculateTurnDirection(ownerRotation.Yaw, TargetRotation.Y)

    return ToSTPOrientation, ToSTPRotationDir
end

function Ability_Task_PlayMoveToSTPAnimation:PlayAnimation(Context, TargetActor, AnimationAsset)
    local ScratchPad = self:GetScratchPad(Context)
    if not ScratchPad then
        return
    end

    if AnimationAsset == nil or not _SP.IsValid(TargetActor) then
        return
    end

    local SkeletalMeshComponent = _SP.SPGameplayUtils.GetSkeletalMeshComponent(TargetActor)
    if not _SP.IsValid(SkeletalMeshComponent) then
        _SP.Log("Ability_Task_PlayMoveToSTPAnimation", "PlayAnimation", "GetSkeletalMesh Error!")
        return
    end

    if self.UseDynamicMontage then
        self:PlayAnimationWithMontage(SkeletalMeshComponent, ScratchPad, AnimationAsset)
    else
        self:PlayAnimationWithSingleNode(SkeletalMeshComponent, ScratchPad, AnimationAsset)
    end
end

function Ability_Task_PlayMoveToSTPAnimation:PlayAnimationWithSingleNode(SkeletalMeshComponent, ScratchPad, AnimationAsset)
    if SkeletalMeshComponent:GetAnimationMode() == UE4.EAnimationMode.AnimationBlueprint then
        table.insert(ScratchPad.SingleNodeSkeletalComponents, SkeletalMeshComponent)
    end

    SkeletalMeshComponent:SetAnimationMode(UE4.EAnimationMode.AnimationSingleNode)
    SkeletalMeshComponent:SetAnimation(AnimationAsset)
    SkeletalMeshComponent:SetPlayRate(self.PlayRate)
    SkeletalMeshComponent:Play(self.Loop)
end

-- 蒙太奇播放动画
function Ability_Task_PlayMoveToSTPAnimation:PlayAnimationWithMontage(SkeletalMeshComponent, ScratchPad, AnimationAsset)
    if SkeletalMeshComponent:GetAnimationMode() ~= UE4.EAnimationMode.AnimationBlueprint then
        SkeletalMeshComponent:SetAnimationMode(UE4.EAnimationMode.AnimationBlueprint)
    end
    local Instance = SkeletalMeshComponent:GetAnimInstance()
    if _SP.IsValid(Instance) then
        local montage = Instance:PlaySlotAnimationAsDynamicMontage(AnimationAsset, self.SlotName, self.BlendInTime, self.BlendOutTime,
                                            self.PlayRate, self.LoopCount, self.BlendOutTriggerTime, self.InTimeToStartMontageAt)
        if montage then
            Instance:Montage_Play(montage)
        end
    end
end

function Ability_Task_PlayMoveToSTPAnimation:GetTaskScratchPadClassBP(Context)
    return SPAbilityUtils.LoadScratchPadClass(SPAbility.ScratchPadClass.PlayMoveToSTPAnimation)
end

function Ability_Task_PlayMoveToSTPAnimation:IsSingleFrameBP()
    return false
end

function Ability_Task_PlayMoveToSTPAnimation:GetTaskRealmBP()
    return UE4.EAbleAbilityTaskRealm.ATR_ClientAndServer
end

return Ability_Task_PlayMoveToSTPAnimation